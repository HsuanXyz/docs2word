{"version":3,"sources":["../../src/file.js"],"names":["readFile","writeTemp","writeResult","fileType","filePath","stat","then","isDirectory","walk","fileList","e","filter","test","readFileList","json","writeFile","JSON","stringify","list","content","map","file","c","directory","includeDir","results","call","readdir","join","isFile","push","sep","filesInDir","concat"],"mappings":";;;;;QAegBA,Q,GAAAA,Q;QAmBAC,S,GAAAA,S;QAIAC,W,GAAAA,W;;AAnChB;;;;AACA;;;;AACA;;;;AACA;;;;;;AANA;;;AAQA,IAAMC,WAAW,MAAjB;;AAEA;;;;;AAKO,SAASH,QAAT,CAAkBI,QAAlB,EAA4B;AAC/B,WAAO,aAAGC,IAAH,CAAQD,QAAR,EACFE,IADE,CACG,gBAAQ;AACV;AACA,YAAGD,KAAKE,WAAL,EAAH,EAAsB;AAClB;AACF,mBAAOC,KAAKJ,QAAL,EACAE,IADA,CACK,aAAK;AACP,oBAAIG,WAAUC,EAAEC,MAAF,CAAU;AAAA,2BAAKR,SAASS,IAAT,CAAcF,CAAd,CAAL;AAAA,iBAAV,CAAd;AACD,uBAAOG,aAAaJ,QAAb,CAAP;AACF,aAJA,CAAP;AAMD,SARD,MAQM;AACF;AACA,mBAAO,aAAGT,QAAH,CAAYI,QAAZ,EAAqB,OAArB,CAAP;AACH;AACJ,KAfE,CAAP;AAgBH;;AAEM,SAASH,SAAT,CAAmBa,IAAnB,EAAyB;AAC5B,WAAO,aAAGC,SAAH,CAAa,qBAAb,EAAmCC,KAAKC,SAAL,CAAeH,IAAf,CAAnC,CAAP;AACH;;AAEM,SAASZ,WAAT,CAAqBY,IAArB,EAA2B;AAC9B,WAAO,aAAGC,SAAH,CAAa,eAAb,EAA6BC,KAAKC,SAAL,CAAeH,IAAf,CAA7B,CAAP;AACH;;AAED;;;;;AAKA,SAASD,YAAT,CAAsBK,IAAtB,EAA4B;AACxB,QAAIC,UAAU,EAAd;AACA,WAAO,eAAKC,GAAL,CAASF,IAAT,EAAe,gBAAQ;AAC1B,eAAO,aAAGlB,QAAH,CAAYqB,IAAZ,EAAiB,OAAjB,EACFf,IADE,CACI,aAAK;AACRa,uBAAWG,CAAX;AACH,SAHE,CAAP;AAIH,KALM,EAKJhB,IALI,CAKC;AAAA,eAAMa,OAAN;AAAA,KALD,CAAP;AAMH;;AAED;;;;;;AAMA,SAASX,IAAT,CAAee,SAAf,EAA0BC,UAA1B,EAAsC;AAClC,QAAIC,UAAU,EAAd;AACA,WAAO,eAAKL,GAAL,CAAS,mBAAOM,IAAP,CAAY,aAAGC,OAAf,EAAwBJ,SAAxB,CAAT,EAA6C,UAASF,IAAT,EAAe;AAC/DA,eAAO,eAAKO,IAAL,CAAUL,SAAV,EAAqBF,IAArB,CAAP;AACA,eAAO,mBAAOK,IAAP,CAAY,aAAGrB,IAAf,EAAqBgB,IAArB,EAA2Bf,IAA3B,CAAgC,UAASD,IAAT,EAAe;AAClD,gBAAIA,KAAKwB,MAAL,EAAJ,EAAoB;AAAE,uBAAOJ,QAAQK,IAAR,CAAaT,IAAb,CAAP;AAA4B;AAClD,gBAAIG,UAAJ,EAAgB;AAAEC,wBAAQK,IAAR,CAAaT,OAAO,eAAKU,GAAzB;AAAgC;AAClD,mBAAOvB,KAAKa,IAAL,EAAWG,UAAX,EAAuBlB,IAAvB,CAA4B,UAAS0B,UAAT,EAAqB;AACpDP,0BAAUA,QAAQQ,MAAR,CAAeD,UAAf,CAAV;AACH,aAFM,CAAP;AAGH,SANM,CAAP;AAOH,KATM,EASJ1B,IATI,CASC,YAAW;AACf,eAAOmB,OAAP;AACH,KAXM,CAAP;AAYH","file":"file.js","sourcesContent":["/**\n * Created by hsuanlee on 16/05/2017.\n */\nimport fs from 'mz/fs'\nimport path from 'path'\nimport when from 'when'\nimport nodefn from 'when/node/function'\n\nconst fileType = /\\.md/;\n\n/**\n * 读取文件内容\n * @param filePath {string}\n * @returns Promise<string>\n */\nexport function readFile(filePath) {\n    return fs.stat(filePath)\n        .then(stat => {\n            // 判断是否为目录\n            if(stat.isDirectory()){\n                // 如果是目录，返回所有制定文件内容\n              return walk(filePath)\n                    .then(e => {\n                        let fileList =e.filter( e => fileType.test(e));\n                       return readFileList(fileList)\n                    })\n\n            }else {\n                // 如果是文件直接返回文件内容\n                return fs.readFile(filePath,'utf-8')\n            }\n        });\n}\n\nexport function writeTemp(json) {\n    return fs.writeFile('./.temp_output.json',JSON.stringify(json));\n}\n\nexport function writeResult(json) {\n    return fs.writeFile('./result.json',JSON.stringify(json));\n}\n\n/**\n * 获取文件列表内所有文件内容\n * @param list\n * @returns {Promise|Promise<string>}\n */\nfunction readFileList(list) {\n    let content = '';\n    return when.map(list, file => {\n        return fs.readFile(file,'utf-8')\n            .then( c => {\n                content += c;\n            })\n    }).then(() => content)\n}\n\n/**\n * 递归查找目录文件\n * @param directory\n * @param includeDir\n * @returns {Promise|Promise<Array<string> >}\n */\nfunction walk (directory, includeDir) {\n    let results = [];\n    return when.map(nodefn.call(fs.readdir, directory), function(file) {\n        file = path.join(directory, file);\n        return nodefn.call(fs.stat, file).then(function(stat) {\n            if (stat.isFile() ) { return results.push(file); }\n            if (includeDir) { results.push(file + path.sep); }\n            return walk(file, includeDir).then(function(filesInDir) {\n                results = results.concat(filesInDir);\n            });\n        });\n    }).then(function() {\n        return results\n    });\n}\n\n"]}