{"version":3,"sources":["../../src/parse-word.js"],"names":["parseWord","wordFrequency","exclude","docs","cleanStr","filter","e","length","indexOf","wordArr","sort","only","Set","result","i","wordItem","name","value","y","splice","push","a","b","text","replace","match","formatHump","len","word","toLowerCase","words","split"],"mappings":"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","file":"parse-word.js","sourcesContent":["/**\n * Created by hsuanlee on 16/05/2017.\n */\n\n\nconst exclude = ['the','to','is','and','of','in','for','var','be','you','on','are','can','an','as','or','we','td',\n    'if', 'tr','by','vue','react','angular','it','js','css','html','id'];\n\n/**\n * 将docs解析为单词数组\n * @param docs {string}\n * @returns {Array<string>}\n */\nexport function parseWord(docs){\n    if(!docs) return [];\n\n    docs = cleanStr(docs); // 清除无效字符串\n\n    return docs.filter( function(e) {\n        return e !== '' && e.length > 2 && exclude.indexOf(e) === -1;\n    })\n}\n\n/**\n * 统计词频，按词频排序\n * @param wordArr\n * @returns {Array.<*>}\n */\nexport function wordFrequency(wordArr){\n    wordArr = wordArr.sort(); // 先进行排序，方便稍后的算法\n    let only = [...new Set(wordArr)]; // 去重\n\n    let result = [];\n\n    for(let i = 0; i < only.length; i++){\n\n        let wordItem = {name:only[i], value:0};\n\n        for(let y = 0; y <  wordArr.length; y++){\n            if(wordItem.name === wordArr[y]){\n                wordItem.value++\n            }else {\n                wordArr.splice(0,y+1);\n                break;\n            }\n        }\n\n        // 排除出现率小于2的单词\n        wordItem.value > 2 && result.push(wordItem);\n    }\n\n    // 返回按词频排序的结果\n    return result.sort( (a,b) =>  b.value - a.value)\n}\n\n/**\n * 清除无效字符串\n * @param text {string}\n * @returns {Array<string>}\n */\nfunction cleanStr(text) {\n\n    text = text.replace(/\\[.*\\]\\(.*\\)/g,''); // md链接\n    text = text.replace(/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/g,''); // 链接\n    text = text.replace(/[0-9]/g,''); // 数字\n    text = text.replace(/(_|\\-)/g,' '); // 减号和下划线分词\n    text = text.replace(/(<.*>)/g,' '); // html标签\n    let wordArr = text.match(/(\\w+)/g);\n    wordArr = formatHump(wordArr);\n    return wordArr;\n}\n\n/**\n * 格式化驼峰命名\n * @param wordArr {Array<string>}\n * @returns {Array<string>}\n */\nfunction formatHump(wordArr) {\n    let len = wordArr.length;\n\n    // TODO 这块耗时与收益不合理\n    for(let i = 0; i < len; i++){\n        let word = wordArr[i].replace(/([A-Z][a-z]*)/g, a => ` ${a.toLowerCase()}`);\n        let words = word.split(' ');\n        if(words.length > 1 ) {\n            len = len-words.length+1;\n            wordArr.splice(i,words.length);\n            wordArr.push(...words);\n            i--\n        }\n    }\n\n    return wordArr;\n}\n\n"]}